{"version":3,"sources":["App.jsx","serviceWorker.js","index.js","store/index.js"],"names":["Home","lazy","AddAuth","App","useEffect","console","log","React","useReducer","reducer","initialState","state","dispatch","Provider","value","className","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","ACTION_TYPE","authData","authText","userInfoList","action","type","payload","AppContext","createContext","a","setTimeout","useAction","useContext","fetchUserInfoList","fetchUserInfoListAction","useAppState"],"mappings":"yQAKMA,G,MAAOC,gBAAK,kBAAM,iCAClBC,EAAUD,gBAAK,kBAAM,gCAEZ,SAASE,IACtBC,qBAAU,WACRC,QAAQC,IAAI,gBAFc,MAKAC,IAAMC,WAAWC,IAASC,KAL1B,mBAKpBC,EALoB,KAKbC,EALa,KAO5B,OACE,kBAAC,IAAWC,SAAZ,CACEC,MAAO,CAAEH,QAAOC,aAEhB,yBAAKG,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,YAAYC,UAAWjB,SCZ7BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a,6PEvIfC,EACW,EADXA,EAEM,EAGN7B,EAAe,CAC1B8B,SAAU,CACRC,SAAU,CACR,uEAGJC,aAAc,IAGT,SAASjC,EAAQE,EAAOgC,GAC7B,OAAQA,EAAOC,MACb,KAAKL,EACH,OAAO,2BACF5B,GADL,IAEE+B,aAAcC,EAAOE,QAAQH,eAEjC,KAAKH,EACH,OAAO,2BACF5B,GADL,IAEE6B,SAAUG,EAAOE,QAAQL,WAE7B,QACE,OAAO7B,GAIN,IAAMmC,EAAavC,IAAMwC,cAAc,M,4CAE9C,aAAqDF,GAArD,eAAAG,EAAA,sDAAyCpC,EAAzC,EAAyCA,SACvCqC,YAAW,WACTrC,EAAS,CACPgC,KAAML,EACNM,QAAS,CACPH,aAAc,CAAC,IAAK,UAGvB,KARL,4C,sBAWO,SAASQ,IAAa,IACnBtC,EAAaL,IAAM4C,WAAWL,GAA9BlC,SAER,MAAO,CACLwC,kBAAmB,SAASP,I,sCAC1BQ,CAAwB,CAAEzC,YAAYiC,KAKrC,SAASS,IAEd,OADkB/C,IAAM4C,WAAWL,GAA3BnC,S","file":"static/js/main.f65957b4.chunk.js","sourcesContent":["import React, { useEffect, Suspense, lazy } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { AppContext, reducer, initialState } from './store';\nimport './App.css';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst AddAuth = lazy(() => import('./pages/AddAuth'));\n\nexport default function App() {\n  useEffect(() => {\n    console.log('App mount');\n  });\n\n  const [ state, dispatch ] = React.useReducer(reducer, initialState);\n\n  return (\n    <AppContext.Provider\n      value={{ state, dispatch }}\n    >\n      <div className=\"App\">\n        <Router>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              <Route exact path=\"/\" component={Home}/>\n              <Route path=\"/add-auth\" component={AddAuth}/>\n            </Switch>\n          </Suspense>\n        </Router>\n      </div>\n    </AppContext.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nexport const ACTION_TYPE = {\n  FETCH_USER_INFO_LIST: 0,\n  FETCH_AUTH_DATA: 1,\n};\n\nexport const initialState = {\n  authData: {\n    authText: [\n      '授权访问您的姓名、昵称'\n    ]\n  },\n  userInfoList: [],\n};\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case ACTION_TYPE.FETCH_USER_INFO_LIST:\n      return {\n        ...state,\n        userInfoList: action.payload.userInfoList,\n      };\n    case ACTION_TYPE.FETCH_AUTH_DATA:\n      return {\n        ...state,\n        authData: action.payload.authData,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const AppContext = React.createContext(null);\n\nasync function fetchUserInfoListAction({ dispatch }, payload) {\n  setTimeout(() => {\n    dispatch({\n      type: ACTION_TYPE.FETCH_USER_INFO_LIST,\n      payload: {\n        userInfoList: ['a', 'b'],\n      },\n    });\n  }, 2000);\n}\n\nexport function useAction() {\n  const { dispatch } = React.useContext(AppContext);\n\n  return {\n    fetchUserInfoList: function(payload) {\n      fetchUserInfoListAction({ dispatch }, payload);\n    },\n  };\n}\n\nexport function useAppState() {\n  const { state } = React.useContext(AppContext);\n  return state;\n}\n"],"sourceRoot":""}